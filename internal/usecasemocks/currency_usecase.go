// Code generated by mockery v2.20.0. DO NOT EDIT.

package usecasemocks

import (
	context "context"
	domain "jagch/boletia/freecurrency/internal"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// CurrencyUsecase is an autogenerated mock type for the CurrencyUsecase type
type CurrencyUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, response
func (_m *CurrencyUsecase) Create(ctx context.Context, response domain.ResponseSync) error {
	ret := _m.Called(ctx, response)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ResponseSync) error); ok {
		r0 = rf(ctx, response)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx, finit, fend
func (_m *CurrencyUsecase) GetAll(ctx context.Context, finit time.Time, fend time.Time) (domain.ResponsesCurrencyGet, error) {
	ret := _m.Called(ctx, finit, fend)

	var r0 domain.ResponsesCurrencyGet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) (domain.ResponsesCurrencyGet, error)); ok {
		return rf(ctx, finit, fend)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) domain.ResponsesCurrencyGet); ok {
		r0 = rf(ctx, finit, fend)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ResponsesCurrencyGet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, finit, fend)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllWithOnlyFend provides a mock function with given fields: ctx, fend
func (_m *CurrencyUsecase) GetAllWithOnlyFend(ctx context.Context, fend time.Time) (domain.ResponsesCurrencyGet, error) {
	ret := _m.Called(ctx, fend)

	var r0 domain.ResponsesCurrencyGet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (domain.ResponsesCurrencyGet, error)); ok {
		return rf(ctx, fend)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) domain.ResponsesCurrencyGet); ok {
		r0 = rf(ctx, fend)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ResponsesCurrencyGet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, fend)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllWithOnlyFinit provides a mock function with given fields: ctx, finit
func (_m *CurrencyUsecase) GetAllWithOnlyFinit(ctx context.Context, finit time.Time) (domain.ResponsesCurrencyGet, error) {
	ret := _m.Called(ctx, finit)

	var r0 domain.ResponsesCurrencyGet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (domain.ResponsesCurrencyGet, error)); ok {
		return rf(ctx, finit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) domain.ResponsesCurrencyGet); ok {
		r0 = rf(ctx, finit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ResponsesCurrencyGet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, finit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllWithoutDates provides a mock function with given fields: ctx
func (_m *CurrencyUsecase) GetAllWithoutDates(ctx context.Context) (domain.ResponsesCurrencyGet, error) {
	ret := _m.Called(ctx)

	var r0 domain.ResponsesCurrencyGet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (domain.ResponsesCurrencyGet, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) domain.ResponsesCurrencyGet); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ResponsesCurrencyGet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCode provides a mock function with given fields: ctx, code, finit, fend
func (_m *CurrencyUsecase) GetByCode(ctx context.Context, code string, finit time.Time, fend time.Time) (domain.ResponsesCurrencyGet, error) {
	ret := _m.Called(ctx, code, finit, fend)

	var r0 domain.ResponsesCurrencyGet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) (domain.ResponsesCurrencyGet, error)); ok {
		return rf(ctx, code, finit, fend)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) domain.ResponsesCurrencyGet); ok {
		r0 = rf(ctx, code, finit, fend)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ResponsesCurrencyGet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, code, finit, fend)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCodeWithOnlyFend provides a mock function with given fields: ctx, code, fend
func (_m *CurrencyUsecase) GetByCodeWithOnlyFend(ctx context.Context, code string, fend time.Time) (domain.ResponsesCurrencyGet, error) {
	ret := _m.Called(ctx, code, fend)

	var r0 domain.ResponsesCurrencyGet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) (domain.ResponsesCurrencyGet, error)); ok {
		return rf(ctx, code, fend)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) domain.ResponsesCurrencyGet); ok {
		r0 = rf(ctx, code, fend)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ResponsesCurrencyGet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, code, fend)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCodeWithOnlyFinit provides a mock function with given fields: ctx, code, finit
func (_m *CurrencyUsecase) GetByCodeWithOnlyFinit(ctx context.Context, code string, finit time.Time) (domain.ResponsesCurrencyGet, error) {
	ret := _m.Called(ctx, code, finit)

	var r0 domain.ResponsesCurrencyGet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) (domain.ResponsesCurrencyGet, error)); ok {
		return rf(ctx, code, finit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) domain.ResponsesCurrencyGet); ok {
		r0 = rf(ctx, code, finit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ResponsesCurrencyGet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, code, finit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCodeWithoutDates provides a mock function with given fields: ctx, code
func (_m *CurrencyUsecase) GetByCodeWithoutDates(ctx context.Context, code string) (domain.ResponsesCurrencyGet, error) {
	ret := _m.Called(ctx, code)

	var r0 domain.ResponsesCurrencyGet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.ResponsesCurrencyGet, error)); ok {
		return rf(ctx, code)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.ResponsesCurrencyGet); ok {
		r0 = rf(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ResponsesCurrencyGet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCurrencyUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewCurrencyUsecase creates a new instance of CurrencyUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCurrencyUsecase(t mockConstructorTestingTNewCurrencyUsecase) *CurrencyUsecase {
	mock := &CurrencyUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
